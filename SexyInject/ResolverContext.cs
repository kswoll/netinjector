using System;

namespace SexyInject
{
    public class ResolverContext
    {
        public Binder Binder { get; }
        public IResolver Resolver { get; private set; }

        /// <summary>
        /// Constrains the resolver to only be applied when the specified predicate is satisfied.
        /// </summary>
        /// <param name="predicate">When this predicate returns true for a given resolution request, the resolver will be used.</param>
        /// <returns>This context to facilitate fluent syntax</returns>
        public ResolverContext When(Func<ResolveContext, Type, bool> predicate) => Decorate(x => new PredicatedResolver(x, predicate));

        /// <summary>
        /// Cache values returned by the resolver based on the key generated by the specified keyGenerator.
        /// </summary>
        /// <param name="keySelector">The result of this selector will be used as the key in the dictionary cache.</param>
        /// <returns>This context to facilitate fluent syntax</returns>
        public ResolverContext Cache(Func<ResolveContext, Type, object> keySelector) => Decorate(x => new CacheResolver(x, keySelector));

        public ResolverContext(Binder binder, IResolver resolver)
        {
            Binder = binder;
            Resolver = resolver;
        }

        private ResolverContext Decorate(Func<IResolver, IResolver> decorator)
        {
            Resolver = decorator(Resolver);
            return this;
        }
    }

    public class ResolverContext<T> : ResolverContext
    {
        public new Binder<T> Binder => (Binder<T>)base.Binder;

        public ResolverContext(Binder<T> binder, IResolver resolver) : base(binder, resolver)
        {
        }
    }
}